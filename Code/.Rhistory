dat.ests <- data.frame(subset(gdat, Post.Surgical.Treatment == "OBS"), riskgrp = fitted$riskgrp)
plot(survfit(Surv(OS.time, OS.status == "Dead") ~ riskgrp, data = dat.ests))
sel.genes <- cors$gene[rank(-cors$cor) <= n.genes]
pcas <- dat0 %>% select(ID, gene, zexpression) %>% filter(gene %in% sel.genes) %>% spread(gene, zexpression)
pcamat <- as.matrix(pcas[, -1])
rownames(pcamat) <- pcas$ID
pc.fit <- prcomp(pcamat, center = FALSE, scale. = FALSE)
pc.dat <- as.data.frame(pc.fit$x[, 1:3])
pc.dat$ID <- rownames(pc.dat)
pdonk <- merge(cldat, pc.dat, by = "ID")
fit.cox <- coxph(Surv(OS.time, OS.status == "Dead") ~ PC1 + PC2 + PC3, data = pdonk)
fit.cox
names(fit.cox)
fit.cox$loglik
fit.cox$wald.test
summary(fit.cox)
names(summary(fit.cox))
summary(fit.cox)$logtest
summary(fit.cox)$logtest[3]
dat0 <- ldat
cors <- dat0 %>% group_by(gene) %>% summarize(cor = cor(zexpression, surv2.5))
## select number of genes
n.gen.cands <- 1:100
p.ngenes <- sapply(n.gen.cands, function(n.genes){
sel.genes <- cors$gene[rank(-cors$cor) <= n.genes]
pcas <- dat0 %>% select(ID, gene, zexpression) %>% filter(gene %in% sel.genes) %>% spread(gene, zexpression)
pcamat <- as.matrix(pcas[, -1])
rownames(pcamat) <- pcas$ID
pc.fit <- prcomp(pcamat, center = FALSE, scale. = FALSE)
pc.dat <- as.data.frame(pc.fit$x[, 1:3])
pc.dat$ID <- rownames(pc.dat)
pdonk <- merge(cldat, pc.dat, by = "ID")
fit.cox <- coxph(Surv(OS.time, OS.status == "Dead") ~ PC1 + PC2 + PC3, data = pdonk)
summary(fit.cox)$logtest[3]
})
n.gen.cands <- 3:100
p.ngenes <- sapply(n.gen.cands, function(n.genes){
sel.genes <- cors$gene[rank(-cors$cor) <= n.genes]
pcas <- dat0 %>% select(ID, gene, zexpression) %>% filter(gene %in% sel.genes) %>% spread(gene, zexpression)
pcamat <- as.matrix(pcas[, -1])
rownames(pcamat) <- pcas$ID
pc.fit <- prcomp(pcamat, center = FALSE, scale. = FALSE)
pc.dat <- as.data.frame(pc.fit$x[, 1:3])
pc.dat$ID <- rownames(pc.dat)
pdonk <- merge(cldat, pc.dat, by = "ID")
fit.cox <- coxph(Surv(OS.time, OS.status == "Dead") ~ PC1 + PC2 + PC3, data = pdonk)
summary(fit.cox)$logtest[3]
})
plot(p.ngenes ~ n.gen.cands)
which(order(p.ngenes) == 1)
fit.superpc <- function(dat0, cldat){
cors <- dat0 %>% group_by(gene) %>% summarize(cor = cor(zexpression, surv2.5))
## select number of genes
n.gen.cands <- 3:100
p.ngenes <- sapply(n.gen.cands, function(n.genes){
sel.genes <- cors$gene[rank(-cors$cor) <= n.genes]
pcas <- dat0 %>% select(ID, gene, zexpression) %>% filter(gene %in% sel.genes) %>% spread(gene, zexpression)
pcamat <- as.matrix(pcas[, -1])
rownames(pcamat) <- pcas$ID
pc.fit <- prcomp(pcamat, center = FALSE, scale. = FALSE)
pc.dat <- as.data.frame(pc.fit$x[, 1:3])
pc.dat$ID <- rownames(pc.dat)
pdonk <- merge(cldat, pc.dat, by = "ID")
fit.cox <- coxph(Surv(OS.time, OS.status == "Dead") ~ PC1 + PC2 + PC3, data = pdonk)
summary(fit.cox)$logtest[3]
})
n.gene.sel <- n.gen.cands[which(order(p.ngenes) == 1)]
sel.genes <- cors$gene[rank(-cors$cor) <= n.genes]
pcas <- dat0 %>% select(ID, gene, zexpression) %>% filter(gene %in% sel.genes) %>% spread(gene, zexpression)
pcamat <- as.matrix(pcas[, -1])
rownames(pcamat) <- pcas$ID
pc.fit <- prcomp(pcamat, center = FALSE, scale. = FALSE)
pc.dat <- as.data.frame(pc.fit$x[, 1:3])
pc.dat$ID <- rownames(pc.dat)
pdonk <- merge(cldat, pc.dat, by = "ID")
fit.cox <- coxph(Surv(OS.time, OS.status == "Dead") ~ PC1 + PC2 + PC3, data = pdonk)
lps <- predict(fit.cox, type = 'lp')
## middle 75%
c.cands <- sort(lps)[floor(.25 * length(lps)):floor(.75 * length(lps))]
p.cands <- sapply(c.cands, function(c.cand){
ltest <- survdiff(Surv(pdonk$OS.time, pdonk$OS.status == "Dead") ~ I(lps > c.cand))
pchisq(ltest$chisq, df = 1, lower.tail = FALSE)
})
cutoff <- c.cands[which(order(p.cands) == 1)]
list(pc.fit = pc.fit, cox.fit = fit.cox, cutoff = cutoff)
}
predict.superpc <- function(dat0, las.fit){
pcests <- predict(las.fit$pc.fit, newdata = dat0)[, 1:3]
dat0 <- cbind(dat0, pcests)
coxests <- predict(las.fit$cox.fit, newdata = dat0, type = 'lp')
list(lps = coxests, riskgrp = coxests > las.fit$cutoff)
}
## substitution estimate
fit.obs <- fit.superpc(subset(ldat, Post.Surgical.Treatment == "OBS"), subset(cldat, Post.Surgical.Treatment == "OBS"))
#fit.obs <- fit.superpc(ldat, cldat)
fitted <- predict.superpc(subset(gdat,  Post.Surgical.Treatment == "OBS"), fit.obs)
dat.ests <- data.frame(subset(gdat, Post.Surgical.Treatment == "OBS"), riskgrp = fitted$riskgrp)
plot(survfit(Surv(OS.time, OS.status == "Dead") ~ riskgrp, data = dat.ests))
table(fitted$riskgrp)
fitted <- predict.superpc(gdat, fit.obs)
dat.ests <- data.frame(gdat, riskgrp = fitted$riskgrp)
plot(survfit(Surv(OS.time, OS.status == "Dead") ~ riskgrp, data = dat.ests))
table(gdat$Post.Surgical.Treatment)
fitted <- predict.superpc(subset(gdat, Post.Surgical.Treatment == "ACT", fit.obs))
fitted <- predict.superpc(subset(gdat, Post.Surgical.Treatment == "ACT"), fit.obs)
dat.ests <- data.frame(subset(gdat, Post.Surgical.Treatment == "ACT"), riskgrp = fitted$riskgrp)
plot(survfit(Surv(OS.time, OS.status == "Dead") ~ riskgrp, data = dat.ests))
library(survival)
library(tidyr)
library(dplyr)
load("../Data/jbl10-data-2016-02-09.RData")
## supervised pca fit for heldout
##    - select x most correlated genes
##    - subset those, form 3 pcas
##    - Fit multivariate model
## cutpoint at median
## predict for held in dataset
scl.cen <- function(x){
(x - mean(x, na.rm = TRUE))/sd(x, na.rm = TRUE)
}
## dichotomize survival
gdat$surv2.5 <- with(gdat, ifelse(DSS.time > 2.5, 1, -1))
psdex <- 2:(grep("tissue", colnames(gdat)) - 1)
gdat[, psdex] <- lapply(gdat[, psdex], scl.cen)
ldat <- gather_(gdat, "gene", "expression", colnames(gdat[, psdex]))
ldat <- ldat %>% group_by(gene) %>% mutate(zexpression = (expression - mean(expression, na.rm = TRUE))/sd(expression, na.rm = TRUE))
cldat <- gdat[, -psdex]
fit.superpc <- function(dat0, cldat){
cors <- dat0 %>% group_by(gene) %>% summarize(cor = cor(zexpression, surv2.5))
## select number of genes
n.gen.cands <- 3:100
p.ngenes <- sapply(n.gen.cands, function(n.genes){
sel.genes <- cors$gene[rank(-cors$cor) <= n.genes]
pcas <- dat0 %>% select(ID, gene, zexpression) %>% filter(gene %in% sel.genes) %>% spread(gene, zexpression)
pcamat <- as.matrix(pcas[, -1])
rownames(pcamat) <- pcas$ID
pc.fit <- prcomp(pcamat, center = FALSE, scale. = FALSE)
pc.dat <- as.data.frame(pc.fit$x[, 1:3])
pc.dat$ID <- rownames(pc.dat)
pdonk <- merge(cldat, pc.dat, by = "ID")
fit.cox <- coxph(Surv(DSS.time, DSS.status == "Dead") ~ PC1 + PC2 + PC3, data = pdonk)
summary(fit.cox)$logtest[3]
})
n.gene.sel <- n.gen.cands[which(order(p.ngenes) == 1)]
sel.genes <- cors$gene[rank(-cors$cor) <= n.genes]
pcas <- dat0 %>% select(ID, gene, zexpression) %>% filter(gene %in% sel.genes) %>% spread(gene, zexpression)
pcamat <- as.matrix(pcas[, -1])
rownames(pcamat) <- pcas$ID
pc.fit <- prcomp(pcamat, center = FALSE, scale. = FALSE)
pc.dat <- as.data.frame(pc.fit$x[, 1:3])
pc.dat$ID <- rownames(pc.dat)
pdonk <- merge(cldat, pc.dat, by = "ID")
fit.cox <- coxph(Surv(DSS.time, DSS.status == "Dead") ~ PC1 + PC2 + PC3, data = pdonk)
lps <- predict(fit.cox, type = 'lp')
## middle 75%
c.cands <- sort(lps)[floor(.25 * length(lps)):floor(.75 * length(lps))]
p.cands <- sapply(c.cands, function(c.cand){
ltest <- survdiff(Surv(pdonk$DSS.time, pdonk$DSS.status == "Dead") ~ I(lps > c.cand))
pchisq(ltest$chisq, df = 1, lower.tail = FALSE)
})
cutoff <- c.cands[which(order(p.cands) == 1)]
list(pc.fit = pc.fit, cox.fit = fit.cox, cutoff = cutoff)
}
predict.superpc <- function(dat0, las.fit){
pcests <- predict(las.fit$pc.fit, newdata = dat0)[, 1:3]
dat0 <- cbind(dat0, pcests)
coxests <- predict(las.fit$cox.fit, newdata = dat0, type = 'lp')
list(lps = coxests, riskgrp = coxests > las.fit$cutoff)
}
## substitution estimate
fit.obs <- fit.superpc(subset(ldat, Post.Surgical.Treatment == "OBS"), subset(cldat, Post.Surgical.Treatment == "OBS"))
#fit.obs <- fit.superpc(ldat, cldat)
fitted <- predict.superpc(subset(gdat, Post.Surgical.Treatment == "ACT"), fit.obs)
dat.ests <- data.frame(subset(gdat, Post.Surgical.Treatment == "ACT"), riskgrp = fitted$riskgrp)
plot(survfit(Surv(DSS.time, DSS.status == "Dead") ~ riskgrp, data = dat.ests))
fit.superpc <- function(dat0, cldat){
cors <- dat0 %>% group_by(gene) %>% summarize(cor = cor(zexpression, surv2.5))
## select number of genes
n.gen.cands <- 3:100
p.ngenes <- sapply(n.gen.cands, function(n.genes){
sel.genes <- cors$gene[rank(-cors$cor) <= n.genes]
pcas <- dat0 %>% select(ID, gene, zexpression) %>% filter(gene %in% sel.genes) %>% spread(gene, zexpression)
pcamat <- as.matrix(pcas[, -1])
rownames(pcamat) <- pcas$ID
pc.fit <- prcomp(pcamat, center = FALSE, scale. = FALSE)
pc.dat <- as.data.frame(pc.fit$x[, 1:3])
pc.dat$ID <- rownames(pc.dat)
pdonk <- merge(cldat, pc.dat, by = "ID")
fit.cox <- coxph(Surv(DSS.time, DSS.status == "Dead") ~ PC1 + PC2 + PC3, data = pdonk)
summary(fit.cox)$logtest[3]
})
n.gene.sel <- n.gen.cands[which(order(p.ngenes) == 1)]
sel.genes <- cors$gene[rank(-cors$cor) <= n.gene.sel]
pcas <- dat0 %>% select(ID, gene, zexpression) %>% filter(gene %in% sel.genes) %>% spread(gene, zexpression)
pcamat <- as.matrix(pcas[, -1])
rownames(pcamat) <- pcas$ID
pc.fit <- prcomp(pcamat, center = FALSE, scale. = FALSE)
pc.dat <- as.data.frame(pc.fit$x[, 1:3])
pc.dat$ID <- rownames(pc.dat)
pdonk <- merge(cldat, pc.dat, by = "ID")
fit.cox <- coxph(Surv(DSS.time, DSS.status == "Dead") ~ PC1 + PC2 + PC3, data = pdonk)
lps <- predict(fit.cox, type = 'lp')
## middle 75%
c.cands <- sort(lps)[floor(.25 * length(lps)):floor(.75 * length(lps))]
p.cands <- sapply(c.cands, function(c.cand){
ltest <- survdiff(Surv(pdonk$DSS.time, pdonk$DSS.status == "Dead") ~ I(lps > c.cand))
pchisq(ltest$chisq, df = 1, lower.tail = FALSE)
})
cutoff <- c.cands[which(order(p.cands) == 1)]
list(pc.fit = pc.fit, cox.fit = fit.cox, cutoff = cutoff)
}
predict.superpc <- function(dat0, las.fit){
pcests <- predict(las.fit$pc.fit, newdata = dat0)[, 1:3]
dat0 <- cbind(dat0, pcests)
coxests <- predict(las.fit$cox.fit, newdata = dat0, type = 'lp')
list(lps = coxests, riskgrp = coxests > las.fit$cutoff)
}
## substitution estimate
fit.obs <- fit.superpc(subset(ldat, Post.Surgical.Treatment == "OBS"), subset(cldat, Post.Surgical.Treatment == "OBS"))
#fit.obs <- fit.superpc(ldat, cldat)
fitted <- predict.superpc(subset(gdat, Post.Surgical.Treatment == "ACT"), fit.obs)
dat.ests <- data.frame(subset(gdat, Post.Surgical.Treatment == "ACT"), riskgrp = fitted$riskgrp)
plot(survfit(Surv(DSS.time, DSS.status == "Dead") ~ riskgrp, data = dat.ests))
fitted <- predict.superpc(subset(gdat, Post.Surgical.Treatment == "OBS"), fit.obs)
dat.ests <- data.frame(subset(gdat, Post.Surgical.Treatment == "OBS"), riskgrp = fitted$riskgrp)
plot(survfit(Surv(DSS.time, DSS.status == "Dead") ~ riskgrp, data = dat.ests))
fit.obs <- fit.superpc(subset(ldat, Post.Surgical.Treatment == "OBS"), subset(cldat, Post.Surgical.Treatment == "OBS"))
#fit.obs <- fit.superpc(ldat, cldat)
fitted <- predict.superpc(subset(gdat, Post.Surgical.Treatment == "OBS"), fit.obs)
dat.ests <- data.frame(subset(gdat, Post.Surgical.Treatment == "OBS"), riskgrp = fitted$riskgrp)
plot(survfit(Surv(DSS.time, DSS.status == "Dead") ~ riskgrp, data = dat.ests))
table(cldat$DSS.status)
## dichotomize survival
gdat$DSS.status[gdat$DSS.status == "dead"] <- "Dead"
gdat$surv2.5 <- with(gdat, ifelse(DSS.time > 2.5, 1, -1))
psdex <- 2:(grep("tissue", colnames(gdat)) - 1)
gdat[, psdex] <- lapply(gdat[, psdex], scl.cen)
ldat <- gather_(gdat, "gene", "expression", colnames(gdat[, psdex]))
ldat <- ldat %>% group_by(gene) %>% mutate(zexpression = (expression - mean(expression, na.rm = TRUE))/sd(expression, na.rm = TRUE))
cldat <- gdat[, -psdex]
fit.superpc <- function(dat0, cldat){
cors <- dat0 %>% group_by(gene) %>% summarize(cor = cor(zexpression, surv2.5))
## select number of genes
n.gen.cands <- 3:100
p.ngenes <- sapply(n.gen.cands, function(n.genes){
sel.genes <- cors$gene[rank(-cors$cor) <= n.genes]
pcas <- dat0 %>% select(ID, gene, zexpression) %>% filter(gene %in% sel.genes) %>% spread(gene, zexpression)
pcamat <- as.matrix(pcas[, -1])
rownames(pcamat) <- pcas$ID
pc.fit <- prcomp(pcamat, center = FALSE, scale. = FALSE)
pc.dat <- as.data.frame(pc.fit$x[, 1:3])
pc.dat$ID <- rownames(pc.dat)
pdonk <- merge(cldat, pc.dat, by = "ID")
fit.cox <- coxph(Surv(DSS.time, DSS.status == "Dead") ~ PC1 + PC2 + PC3, data = pdonk)
summary(fit.cox)$logtest[3]
})
n.gene.sel <- n.gen.cands[which(order(p.ngenes) == 1)]
sel.genes <- cors$gene[rank(-cors$cor) <= n.gene.sel]
pcas <- dat0 %>% select(ID, gene, zexpression) %>% filter(gene %in% sel.genes) %>% spread(gene, zexpression)
pcamat <- as.matrix(pcas[, -1])
rownames(pcamat) <- pcas$ID
pc.fit <- prcomp(pcamat, center = FALSE, scale. = FALSE)
pc.dat <- as.data.frame(pc.fit$x[, 1:3])
pc.dat$ID <- rownames(pc.dat)
pdonk <- merge(cldat, pc.dat, by = "ID")
fit.cox <- coxph(Surv(DSS.time, DSS.status == "Dead") ~ PC1 + PC2 + PC3, data = pdonk)
lps <- predict(fit.cox, type = 'lp')
## middle 75%
c.cands <- sort(lps)[floor(.25 * length(lps)):floor(.75 * length(lps))]
p.cands <- sapply(c.cands, function(c.cand){
ltest <- survdiff(Surv(pdonk$DSS.time, pdonk$DSS.status == "Dead") ~ I(lps > c.cand))
pchisq(ltest$chisq, df = 1, lower.tail = FALSE)
})
cutoff <- c.cands[which(order(p.cands) == 1)]
list(pc.fit = pc.fit, cox.fit = fit.cox, cutoff = cutoff)
}
predict.superpc <- function(dat0, las.fit){
pcests <- predict(las.fit$pc.fit, newdata = dat0)[, 1:3]
dat0 <- cbind(dat0, pcests)
coxests <- predict(las.fit$cox.fit, newdata = dat0, type = 'lp')
list(lps = coxests, riskgrp = coxests > las.fit$cutoff)
}
## substitution estimate
fit.obs <- fit.superpc(subset(ldat, Post.Surgical.Treatment == "OBS"), subset(cldat, Post.Surgical.Treatment == "OBS"))
#fit.obs <- fit.superpc(ldat, cldat)
fitted <- predict.superpc(subset(gdat, Post.Surgical.Treatment == "OBS"), fit.obs)
dat.ests <- data.frame(subset(gdat, Post.Surgical.Treatment == "OBS"), riskgrp = fitted$riskgrp)
plot(survfit(Surv(DSS.time, DSS.status == "Dead") ~ riskgrp, data = dat.ests))
table(cldat$DSS.time, cldat$DSS.status)
## dichotomize survival
gdat$DSS.status[gdat$DSS.status == "dead"] <- "Dead"
gdat$surv2.5 <- with(gdat, ifelse(DSS.time >= 5, 1, -1))
psdex <- 2:(grep("tissue", colnames(gdat)) - 1)
gdat[, psdex] <- lapply(gdat[, psdex], scl.cen)
ldat <- gather_(gdat, "gene", "expression", colnames(gdat[, psdex]))
ldat <- ldat %>% group_by(gene) %>% mutate(zexpression = (expression - mean(expression, na.rm = TRUE))/sd(expression, na.rm = TRUE))
cldat <- gdat[, -psdex]
fit.superpc <- function(dat0, cldat){
cors <- dat0 %>% group_by(gene) %>% summarize(cor = cor(zexpression, surv2.5))
## select number of genes
n.gen.cands <- 3:100
p.ngenes <- sapply(n.gen.cands, function(n.genes){
sel.genes <- cors$gene[rank(-cors$cor) <= n.genes]
pcas <- dat0 %>% select(ID, gene, zexpression) %>% filter(gene %in% sel.genes) %>% spread(gene, zexpression)
pcamat <- as.matrix(pcas[, -1])
rownames(pcamat) <- pcas$ID
pc.fit <- prcomp(pcamat, center = FALSE, scale. = FALSE)
pc.dat <- as.data.frame(pc.fit$x[, 1:3])
pc.dat$ID <- rownames(pc.dat)
pdonk <- merge(cldat, pc.dat, by = "ID")
fit.cox <- coxph(Surv(DSS.time, DSS.status == "Dead") ~ PC1 + PC2 + PC3, data = pdonk)
summary(fit.cox)$logtest[3]
})
n.gene.sel <- n.gen.cands[which(order(p.ngenes) == 1)]
sel.genes <- cors$gene[rank(-cors$cor) <= n.gene.sel]
pcas <- dat0 %>% select(ID, gene, zexpression) %>% filter(gene %in% sel.genes) %>% spread(gene, zexpression)
pcamat <- as.matrix(pcas[, -1])
rownames(pcamat) <- pcas$ID
pc.fit <- prcomp(pcamat, center = FALSE, scale. = FALSE)
pc.dat <- as.data.frame(pc.fit$x[, 1:3])
pc.dat$ID <- rownames(pc.dat)
pdonk <- merge(cldat, pc.dat, by = "ID")
fit.cox <- coxph(Surv(DSS.time, DSS.status == "Dead") ~ PC1 + PC2 + PC3, data = pdonk)
lps <- predict(fit.cox, type = 'lp')
## middle 75%
c.cands <- sort(lps)[floor(.25 * length(lps)):floor(.75 * length(lps))]
p.cands <- sapply(c.cands, function(c.cand){
ltest <- survdiff(Surv(pdonk$DSS.time, pdonk$DSS.status == "Dead") ~ I(lps > c.cand))
pchisq(ltest$chisq, df = 1, lower.tail = FALSE)
})
cutoff <- c.cands[which(order(p.cands) == 1)]
list(pc.fit = pc.fit, cox.fit = fit.cox, cutoff = cutoff)
}
predict.superpc <- function(dat0, las.fit){
pcests <- predict(las.fit$pc.fit, newdata = dat0)[, 1:3]
dat0 <- cbind(dat0, pcests)
coxests <- predict(las.fit$cox.fit, newdata = dat0, type = 'lp')
list(lps = coxests, riskgrp = coxests > las.fit$cutoff)
}
## substitution estimate
fit.obs <- fit.superpc(subset(ldat, Post.Surgical.Treatment == "OBS"), subset(cldat, Post.Surgical.Treatment == "OBS"))
#fit.obs <- fit.superpc(ldat, cldat)
fitted <- predict.superpc(subset(gdat, Post.Surgical.Treatment == "OBS"), fit.obs)
dat.ests <- data.frame(subset(gdat, Post.Surgical.Treatment == "OBS"), riskgrp = fitted$riskgrp)
plot(survfit(Surv(DSS.time, DSS.status == "Dead") ~ riskgrp, data = dat.ests))
auc <- function(lll, ddd){
ROCR::performance(ROCR::prediction(lll, ddd), "auc")@y.values[[1]]
}
or <- function(sc, resp){
sc01 <- sc > median(sc, na.rm = TRUE)
tab <- table(sc01, resp)
tab[1 ,1] * tab[2, 2] / (tab[1, 2] * tab[2, 1])
}
createnosignaldata <- function(n, d){
data.frame(Y = rbinom(n, 1, p = .3), X = matrix(rnorm(n * d), nrow = n))
}
selectvars <- function(data0){
pees <- sapply(data0[, -1], function(v1){
fit0 <- glm(data0$Y ~ v1, family = "binomial", model = FALSE, y = FALSE)
summary(fit0)$coefficients[2, 4]
})
order(pees)[1:25]
}
runclassifier <- function(data0, selected){
dat2 <- data0[, c(1, selected + 1)]
fit1 <- glm(Y ~ ., data = dat2, family = "binomial", model = FALSE, y = FALSE)
fit1
}
fitclassifier <- function(fit1, data1){
scores <- predict(fit1, newdata = data1, type = "response")
response <- as.factor(data1$Y)
c(AUC = auc(scores, response), OR = or(scores, response))
}
naiveest <- function(n = 2000, d = 500){
dat0 <- createnosignaldata(n, d)
train <- dat0
selecttr <- selectvars(train)
fit <- runclassifier(train, selecttr)
fitclassifier(fit, train)
}
zhutest.hold <- function(trratio = .5, n = 2000, d = 500){
dat0 <- createnosignaldata(n, d)
npart.tr <- floor(trratio * n)
tr.dex <- sample(1:n, npart.tr)
ho.dex <- setdiff(1:n, tr.dex)
train <- dat0[tr.dex, ]
hold <- dat0[ho.dex, ]
selecttr <- selectvars(dat0) ## selection performed on entire dataset
fit <- runclassifier(train, selecttr)
fitclassifier(fit, hold)
}
zhutest.hold2 <- function(trratio = .5, n = 2000, d = 500){
dat0 <- createnosignaldata(n, d)
npart.tr <- floor(trratio * n)
tr.dex <- sample(1:n, npart.tr)
train <- dat0[tr.dex, ]
selecttr <- selectvars(train) ## selection and fitt performed on holdout
fit <- runclassifier(train, selecttr)
fitclassifier(fit, dat0)  ## evaluated on entire dataset
}
holdoutest <- function(trratio = .5, n = 2000, d = 500){
dat0 <- createnosignaldata(n, d)
npart.tr <- floor(trratio * n)
tr.dex <- sample(1:n, npart.tr)
ho.dex <- setdiff(1:n, tr.dex)
train <- dat0[tr.dex, ]
hold <- dat0[ho.dex, ]
selecttr <- selectvars(train)
fit <- runclassifier(train, selecttr)
fitclassifier(fit, hold)
}
partitiondex <- function(dat0, K){
n0 <- sum(dat0$Y == 0)
n1 <- sum(dat0$Y == 1)
k0 <- floor(n0 / K)
k1 <- floor(n1 / K)
dex.0 <- sample(which(dat0$Y == 0), n0, replace = FALSE)
dex.1 <- sample(which(dat0$Y == 1), n1, replace = FALSE)
i0 <- i1 <- 1
ret <- vector("list", length = K)
for(p in 1:K){
ret[[p]] <- c(dex.0[i0:(i0 + k0 - 1)], dex.1[i1:(i1 + k1 - 1)])
i0 <- i0 + k0
i1 <- i1 + k1
}
left <- c(dex.0[i0:length(dex.0)], dex.1[i1:length(dex.1)])
Ki <- 1
for(j in left){
ret[[Ki]] <- c(ret[[Ki]], j)
if(Ki < 50){
Ki <- Ki + 1
} else {
Ki <- 1
}
ret
}
zhu.cv <- function(k = 10, K = 50, n = 2000, d = 500){
dat0 <- createnosignaldata(n, d)
selectin <- selectvars(dat0)
over <- partitiondex(dat0, K = K)
cvests <- sapply(over, function(oot.dex){
oot <- dat0[oot.dex, ]
estin <- dat0[setdiff(1:n, oot.dex), ]
fit <- runclassifier(estin, selectin)
fitclassifier(fit, oot)
})
rowMeans(cvests, na.rm = TRUE)
}
cvest <- function(k = 10, K = 50, n = 2000, d = 500){
dat0 <- createnosignaldata(n, d)
over <- partitiondex(dat0, K = K)
cvests <- sapply(over, function(oot.dex){
oot <- dat0[oot.dex, ]
estin <- dat0[setdiff(1:n, oot.dex), ]
selectin <- selectvars(estin)
fit <- runclassifier(estin, selectin)
fitclassifier(fit, oot)
})
rowMeans(cvests, na.rm = TRUE)
}
cvpreval <- function(k = 10, K = 50, n = 2000, d = 500){
dat0 <- createnosignaldata(n, d)
over <- partitiondex(dat0, K = K)
cvests <- lapply(over, function(oot.dex){
oot <- dat0[oot.dex, ]
estin <- dat0[setdiff(1:n, oot.dex), ]
selectin <- selectvars(estin)
fit <- runclassifier(estin, selectin)
preval <- predict(fit, newdata = oot, type = "response")
data.frame(scores = preval, response = as.factor(oot$Y))
})
pval <- do.call("rbind", cvests)
c(AUC = auc(pval$scores, pval$response), OR = or(pval$scores, pval$response))
}
bootest <- function(B = 50, n = 2000, d = 500){
dat0 <- createnosignaldata(n, d)
bootests <- replicate(B, {
boot.dex <- sample(1:n, n, replace = TRUE)
bin <- dat0[boot.dex, ]
notbin <- setdiff(1:n, unique(boot.dex))
selectin <- selectvars(bin)
fit <- runclassifier(bin, selectin)
fitclassifier(fit, dat0[notbin, ])
})
rowMeans(bootests)
}
runsim <- function(n = 1000, d = 500, B = 200){
c(holdout.5 = holdoutest(trratio = .5, n = n, d = d),
holdout.3 = holdoutest(trratio = .666, n = n, d = d),
cv.10 = cvest(k = 50, K = 50, n = n, d = d),
cv.preval = cvpreval(k = 50, K = 200, n = n, d = d),
cv.100 = cvest(k = 100, K = 10, n = n, d = d),
boot = bootest(B = 200, n = n, d = d),
zhu.hold = zhutest.hold(trratio = .5, n = n, d = d),
zhu.hold2 = zhutest.hold2(trratio = .5, n = n, d = d),
zhu.cv = zhu.cv(k = 50, K = 50, n = n, d = d),
naive = naiveest(n = n, d = d))
}
load("cvsim-result.RData")
cvres <- do.call("rbind", cvsims)
cvlong <- do.call("rbind", lapply(1:ncol(cvres), function(i){
cl <- cvres[, i]
splow <- strsplit(colnames(cvres)[i], ".", fixed = TRUE)
nm <- paste(unlist(sapply(splow, function(s) rev(rev(s)[-1]))), collapse = ".")
cls <- sapply(splow, function(s) rev(s)[1])
data.frame(value = cvres[, i], stat = cls, scen = nm, stringsAsFactors = FALSE)
}))
head(cvlong)
test <- subset(cvlong, stat == "OR" & scen == "cv.10")
summary(test)
hist(test)
hist(test$value)
