parse_pheno <- function(x){
pair <- strsplit(paste(x), ": ", fixed = TRUE)
if(length(pair[[1]]) == 1){
x
} else {
name <- pair[[1]]
name <- name[!is.na(name)][1]
val <- sapply(pair, "[", 2)
## try converting to numeric
nval <- as.numeric(val)
if(all(is.na(nval))) nval <- val
out <- data.frame(nval)
colnames(out) <- name
out
}
pheno0 <- gdat[, c("ID", grep("characteristics", colnames((gdat[, (ncol(gdat) - 55):ncol(gdat)])[1:4, ]), value = TRUE))]
pheno0$characteristics_ch1.12 <- paste(pheno0$characteristics_ch1.12)
pheno0$characteristics_ch1.12[pheno0$characteristics_ch1.12 == ""] <- paste(pheno0$characteristics_ch1.11[pheno0$characteristics_ch1.12 == ""])
pheno0$characteristics_ch1.11 <- NULL
pheno <- as.data.frame(lapply(pheno0, parse_pheno))
pheno[1:4,]
gdat <- merge(gdat, pheno, by = "ID")
pheno.xls <- import("../Data/Zhu_2010_JCO_microarray_pts_clin_info.xls", sheet = 1)
check <- merge(pheno, pheno.xls, by.x = "age", by.y = "Age")
check2 <- subset(check, OS.time == `OS time`)
plot(OS.time ~ `OS time`, data = check2)
save(gdat, file = paste0("../Data/jbl10-data-", Sys.Date(), ".RData"))
load("../Data/jbl10-data-2015-12-15.RData")
## develop signature in 62 OBS patient subset
table(gdat$Post.Surgical.Treatment)
obsgrp <- subset(gdat, Post.Surgical.Treatment == "OBS")
## identify subset of 172 probes with P < .005 in cox model with outcome
# results from Zhu, supplementary table 6S
zhu <- readLines("../Data/sig172-probes-zhu.txt")
header <- zhu[1:8]
data0 <- zhu[-c(1:8)]
data1 <- unlist(strsplit(data0, split = " ", fixed = TRUE))
data2 <- as.data.frame(matrix(data1, ncol = 8, byrow = TRUE), stringsAsFactors = FALSE)
data2[, 5:8] <- lapply(data2[, 5:8], as.numeric)
colnames(data2) <- header
## can i reproduce it?
psdex <- 1:(grep("title", colnames(gdat)) - 1)
ps172dex <- NULL
for(i in psdex){
form <- as.formula(paste("Surv(OS.time, OS.status == 'Dead') ~ ", colnames(obsgrp)[i]))
fit <- tryCatch(coxph(form, data = obsgrp, y = FALSE, ties = "breslow", robust = FALSE), error = function(e) NA)
if(is.na(fit[[1]])) next
fs <- summary(fit)$coefficients
ps172dex <- rbind(ps172dex, data.frame(probe = colnames(obsgrp)[i], index = i,
p.value = fs[5], hr = fs[2], lhr = exp(fs[1] - 1.96*fs[3]),
uhr = exp(fs[1] + 1.96*fs[3]), stringsAsFactors = FALSE))
}
ps172dex$probe2 <- ifelse(substr(ps172dex$probe, 1, 1) == "X",
substr(ps172dex$probe, 2, nchar(ps172dex$probe)), ps172dex$probe)
matches <- merge(data2, ps172dex, by.x = "Probe Set ID", by.y = "probe2", all.x = TRUE, all.y = FALSE)
plot(hr ~ HR, data = matches)
gdat[, (ncol(gdat) - 40):ncol(gdat)]
gdat[1:2, (ncol(gdat) - 40):ncol(gdat)]
table(gdat$taxid_ch1)
gdat[1:2, (ncol(gdat) - 60):ncol(gdat)]
0.3 == 0.1 + .2
?all.equal
all.equal(.2, .1 + .1)
.2 == .1 + .1
.3 == .1 + .2
all.equal(.3, .1 + .2)
library(Biobase)
library(GEOquery)
library(rio)
# load series and platform data from GEO
gset <- getGEO("GSE14814", GSEMatrix =TRUE)
if (length(gset) > 1) idx <- grep("GPL96", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
?ExpressionSet
gset@assayData
phenoData(gset)
assayData(gset)
summary(assayData(gset))
str(assayData(gset))
experimentData(gset)
notes(gset)
annotation(gset)
protocolData(gset)
preproc(gset)
featureData(gset)
featureData(gset)@varLabels
featureData(gset)$varLabels
featureData(gset) -> mtp
mtp
mtp@varMetadata
pData(gset)
colnames(pData(gset))
library(survival)
load("../Data/jbl10-data-2015-12-15.RData")
## develop signature in 62 OBS patient subset
table(gdat$Post.Surgical.Treatment)
obsgrp <- subset(gdat, Post.Surgical.Treatment == "OBS")
obsgrp[, (ncol(obsgrp)-60):ncol(obsgrp)]
table(obsgrp$data_processing)
obsgrp$batch <- ifelse(obsgrp$data_processing == "The data were preprocessed using RMA v0.5.", -1, 1)
table(obsgrp$batch)
table(obsgrp$batchID)
table(obsgrp$batch)
psdex <- 1:(grep("title", colnames(gdat)) - 1)
loggenx <- log(t(as.matrix(obsgrp[, psdex])))
loggenx[1:2,]
colnames(gdat)[1]
psdex <- 2:(grep("title", colnames(gdat)) - 1)
loggenx <- log(t(as.matrix(obsgrp[, psdex])))
loggenx[1:2,]
write.table(loggenx, file = "../Data/matlabin.txt", row.names = FALSE, col.names = FALSE)
write.table(batch, file = "../Data/matlabbatch.txt", row.names = FALSE, col.names = FALSE)
batch <- obsgrp$batch
write.table(batch, file = "../Data/matlabbatch.txt", row.names = FALSE, col.names = FALSE)
paste(rep("%f", ncol(loggenx)))
paste(rep("%f", ncol(loggenx)), collapse = " ")
8/618000
8/618000 * 1e5
biocLite("sva")
source("https://bioconductor.org/biocLite.R")
biocLite("sva")
library(sva)
gset <- getGEO("GSE14814", GSEMatrix =TRUE)
if (length(gset) > 1) idx <- grep("GPL96", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
gdat <- as(gset, "data.frame")
gdat$ID <- 1:nrow(gdat)
library(Biobase)
library(GEOquery)
library(rio)
gset <- getGEO("GSE14814", GSEMatrix =TRUE)
if (length(gset) > 1) idx <- grep("GPL96", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
gdat <- as(gset, "data.frame")
gdat$ID <- 1:nrow(gdat)
gexpr <- exprs(gset)
parse_pheno <- function(x){
pair <- strsplit(paste(x), ": ", fixed = TRUE)
if(length(pair[[1]]) == 1){
x
} else {
name <- pair[[1]]
name <- name[!is.na(name)][1]
val <- sapply(pair, "[", 2)
## try converting to numeric
nval <- as.numeric(val)
if(all(is.na(nval))) nval <- val
out <- data.frame(nval)
colnames(out) <- name
out
}
pheno0 <- gdat[, c("ID", grep("characteristics", colnames((gdat[, (ncol(gdat) - 55):ncol(gdat)])[1:4, ]), value = TRUE))]
pheno0$characteristics_ch1.12 <- paste(pheno0$characteristics_ch1.12)
pheno0$characteristics_ch1.12[pheno0$characteristics_ch1.12 == ""] <- paste(pheno0$characteristics_ch1.11[pheno0$characteristics_ch1.12 == ""])
pheno0$characteristics_ch1.11 <- NULL
pheno <- as.data.frame(lapply(pheno0, parse_pheno))
gdat <- merge(gdat, pheno, by = "ID")
gdat$batch <- ifelse(gdat$data_processing == "The data were preprocessed using RMA v0.5.", -1, 1)
?ComBat
batchadj <- ComBat(gexpr, batch = gdat$batch, mod = modcom, prior.plots = TRUE)
modcom <- model.matrix( ~ 1, data = gdat)
batchadj <- ComBat(gexpr, batch = gdat$batch, mod = modcom, prior.plots = TRUE)
dim(gexpr)
colnames((gdat[, (ncol(gdat) - 55):ncol(gdat)])[1:4, ]
)
gdat[, (ncol(gdat) - 55):ncol(gdat)])[1:4, ]
gdat[, (ncol(gdat) - 55):ncol(gdat)][1:4, ]
eSet
?eSet
featureData(gset)
summary(featureData(gset))
data.frame(featureData(gset))
fdat <- featureData(gset)
summary(fdat@data)
table(fdat@data$ENTREZ_GENE_ID)
table(fdat@data$ENTREZ_GENE_ID == "")
fData(gset)
summary(fData(gset))
dim(gexpr)
22283 - 19619
fdata <- fData(gset)
table(fdata$`Gene Ontology Cellular Component` == "")
fdex <- fdata$ID[fdata$ENTREZ_GENE_ID != "" & fdata$`Gene Ontology Cellular Component` != ""]
gexpr <- gexpr[fdex, ]
modcom <- model.matrix( ~ 1, data = gdat)
batchadj <- ComBat(gexpr, batch = gdat$batch, mod = modcom, prior.plots = TRUE)
batchadj <- ComBat(gexpr, batch = gdat$batch, mod = NULL, prior.plots = TRUE)
summary(gexpr)
anyna <- rowSums(is.na(gexpr)) > 0
anyna
gexpr <- gexpr[!anyna, ]
dim(gexpr)
batchadj <- ComBat(gexpr, batch = gdat$batch, mod = NULL, prior.plots = TRUE)
batchadj <- ComBat(gexpr, batch = gdat$batch, mod = modcom, prior.plots = TRUE)
pheno
rownames(gdat)
gset
phenoData(gset)
sampleNames(phenoData(gset))
expradj <- as.data.frame(t(batchadj))
rownames(expradj)
pheno <- merge(expradj, pheno, by = "ID")
library(Biobase)
library(GEOquery)
library(rio)
library(sva)
# load series and platform data from GEO
gset <- getGEO("GSE14814", GSEMatrix =TRUE)
if (length(gset) > 1) idx <- grep("GPL96", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
gdat <- as(gset, "data.frame")
gdat$ID <- sampleNames(phenoData(gset))
gexpr <- exprs(gset)
fdata <- fData(gset)
fdex <- fdata$ID[fdata$ENTREZ_GENE_ID != "" & fdata$`Gene Ontology Cellular Component` != ""]
gexpr <- gexpr[fdex, ]
anyna <- rowSums(is.na(gexpr)) > 0
gexpr <- gexpr[!anyna, ]
## 19,619 genes, close enough
parse_pheno <- function(x){
pair <- strsplit(paste(x), ": ", fixed = TRUE)
if(length(pair[[1]]) == 1){
x
} else {
name <- pair[[1]]
name <- name[!is.na(name)][1]
val <- sapply(pair, "[", 2)
## try converting to numeric
nval <- as.numeric(val)
if(all(is.na(nval))) nval <- val
out <- data.frame(nval)
colnames(out) <- name
out
}
pheno0 <- gdat[, c("ID", grep("characteristics", colnames((gdat[, (ncol(gdat) - 55):ncol(gdat)])[1:4, ]), value = TRUE))]
pheno0$characteristics_ch1.12 <- paste(pheno0$characteristics_ch1.12)
pheno0$characteristics_ch1.12[pheno0$characteristics_ch1.12 == ""] <- paste(pheno0$characteristics_ch1.11[pheno0$characteristics_ch1.12 == ""])
pheno0$characteristics_ch1.11 <- NULL
pheno <- as.data.frame(lapply(pheno0, parse_pheno))
#gdat <- merge(gdat, pheno, by = "ID")
gdat$batch <- ifelse(gdat$data_processing == "The data were preprocessed using RMA v0.5.", -1, 1)
## remove batch effect
modcom <- model.matrix( ~ 1, data = gdat)
batchadj <- ComBat(gexpr, batch = gdat$batch, mod = modcom, prior.plots = TRUE)
expradj <- as.data.frame(t(batchadj))
expradj$ID <- rownames(expradj)
pheno <- merge(expradj, pheno, by = "ID")
## make sure no merging errors in data
pheno.xls <- import("../Data/Zhu_2010_JCO_microarray_pts_clin_info.xls", sheet = 1)
check <- merge(pheno, pheno.xls, by.x = "age", by.y = "Age")
check2 <- subset(check, OS.time == `OS time`)
nrow(check2) == nrow(pheno)
plot(OS.time ~ `OS time`, data = check2)
save(gdat, file = paste0("../Data/jbl10-data-", Sys.Date(), ".RData"))
save(phenoplus, file = paste0("../Data/jbl10-data-", Sys.Date(), ".RData"))
phenoplus <- merge(expradj, pheno, by = "ID")
save(phenoplus, file = paste0("../Data/jbl10-data-", Sys.Date(), ".RData"))
gdat <- merge(expradj, pheno, by = "ID")
save(gdat, file = paste0("../Data/jbl10-data-", Sys.Date(), ".RData"))
library(survival)
load("../Data/jbl10-data-2015-12-17.RData")
## develop signature in 62 OBS patient subset
table(gdat$Post.Surgical.Treatment)
obsgrp <- subset(gdat, Post.Surgical.Treatment == "OBS")
psdex <- 2:(grep("title", colnames(gdat)) - 1)
colnames(gdat)
library(Biobase)
library(GEOquery)
library(rio)
library(sva)
# load series and platform data from GEO
gset <- getGEO("GSE14814", GSEMatrix =TRUE)
if (length(gset) > 1) idx <- grep("GPL96", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
gdat <- as(gset, "data.frame")
gdat$ID <- sampleNames(phenoData(gset))
gexpr <- exprs(gset)
fdata <- fData(gset)
fdex <- fdata$ID[fdata$ENTREZ_GENE_ID != "" & fdata$`Gene Ontology Cellular Component` != ""]
gexpr <- gexpr[fdex, ]
anyna <- rowSums(is.na(gexpr)) > 0
gexpr <- gexpr[!anyna, ]
## 19,619 genes, close enough
parse_pheno <- function(x){
pair <- strsplit(paste(x), ": ", fixed = TRUE)
if(length(pair[[1]]) == 1){
x
} else {
name <- pair[[1]]
name <- name[!is.na(name)][1]
val <- sapply(pair, "[", 2)
## try converting to numeric
nval <- as.numeric(val)
if(all(is.na(nval))) nval <- val
out <- data.frame(nval)
colnames(out) <- name
out
}
pheno0 <- gdat[, c("ID", grep("characteristics", colnames((gdat[, (ncol(gdat) - 55):ncol(gdat)])[1:4, ]), value = TRUE))]
pheno0$characteristics_ch1.12 <- paste(pheno0$characteristics_ch1.12)
pheno0$characteristics_ch1.12[pheno0$characteristics_ch1.12 == ""] <- paste(pheno0$characteristics_ch1.11[pheno0$characteristics_ch1.12 == ""])
pheno0$characteristics_ch1.11 <- NULL
pheno <- as.data.frame(lapply(pheno0, parse_pheno))
#gdat <- merge(gdat, pheno, by = "ID")
gdat$batch <- ifelse(gdat$data_processing == "The data were preprocessed using RMA v0.5.", -1, 1)
## remove batch effect
modcom <- model.matrix( ~ 1, data = gdat)
batchadj <- ComBat(gexpr, batch = gdat$batch, mod = modcom, prior.plots = TRUE)
expradj <- as.data.frame(t(batchadj))
expradj$ID <- rownames(expradj)
gdat <- merge(expradj, pheno, by = "ID")
## make sure no merging errors in data
pheno.xls <- import("../Data/Zhu_2010_JCO_microarray_pts_clin_info.xls", sheet = 1)
check <- merge(pheno, pheno.xls, by.x = "age", by.y = "Age")
check2 <- subset(check, OS.time == `OS time`)
# nrow(check2) == nrow(pheno)
# plot(OS.time ~ `OS time`, data = check2)
# we good
save(gdat, file = paste0("../Data/jbl10-data-", Sys.Date(), ".RData"))
table(gdat$Post.Surgical.Treatment)
obsgrp <- subset(gdat, Post.Surgical.Treatment == "OBS")
psdex <- 2:(grep("title", colnames(gdat)) - 1)
grep("title", colnames(gdat))
colnames(gdat)
colnames(gdat[, (ncol(gdat)-20):ncol(gdat)])
psdex <- 2:(grep("tissue", colnames(gdat)) - 1)
zhu <- readLines("../Data/sig172-probes-zhu.txt")
header <- zhu[1:8]
data0 <- zhu[-c(1:8)]
data1 <- unlist(strsplit(data0, split = " ", fixed = TRUE))
data2 <- as.data.frame(matrix(data1, ncol = 8, byrow = TRUE), stringsAsFactors = FALSE)
data2[, 5:8] <- lapply(data2[, 5:8], as.numeric)
colnames(data2) <- header
ps172dex <- NULL
for(i in psdex){
form <- as.formula(paste("Surv(OS.time, OS.status == 'Dead') ~ ", colnames(obsgrp)[i]))
fit <- tryCatch(coxph(form, data = obsgrp, y = FALSE, ties = "breslow", robust = FALSE), error = function(e) NA)
if(is.na(fit[[1]])) next
fs <- summary(fit)$coefficients
ps172dex <- rbind(ps172dex, data.frame(probe = colnames(obsgrp)[i], index = i,
p.value = fs[5], hr = fs[2], lhr = exp(fs[1] - 1.96*fs[3]),
uhr = exp(fs[1] + 1.96*fs[3]), stringsAsFactors = FALSE))
}
colnames(gdat)[psdex] <- paste0("X", colnames(gdat)[psdex])
ps172dex <- NULL
for(i in psdex){
form <- as.formula(paste("Surv(OS.time, OS.status == 'Dead') ~ ", colnames(obsgrp)[i]))
fit <- tryCatch(coxph(form, data = obsgrp, y = FALSE, ties = "breslow", robust = FALSE), error = function(e) NA)
if(is.na(fit[[1]])) next
fs <- summary(fit)$coefficients
ps172dex <- rbind(ps172dex, data.frame(probe = colnames(obsgrp)[i], index = i,
p.value = fs[5], hr = fs[2], lhr = exp(fs[1] - 1.96*fs[3]),
uhr = exp(fs[1] + 1.96*fs[3]), stringsAsFactors = FALSE))
}
ps172dex$probe2 <- ifelse(substr(ps172dex$probe, 1, 1) == "X",
substr(ps172dex$probe, 2, nchar(ps172dex$probe)), ps172dex$probe)
load("../Data/jbl10-data-2015-12-17.RData")
## develop signature in 62 OBS patient subset
table(gdat$Post.Surgical.Treatment)
obsgrp <- subset(gdat, Post.Surgical.Treatment == "OBS")
psdex <- 2:(grep("tissue", colnames(gdat)) - 1)
colnames(gdat)[psdex] <- paste0("X", colnames(gdat)[psdex])
## identify subset of 172 probes with P < .005 in cox model with outcome
# results from Zhu, supplementary table 6S
zhu <- readLines("../Data/sig172-probes-zhu.txt")
header <- zhu[1:8]
data0 <- zhu[-c(1:8)]
data1 <- unlist(strsplit(data0, split = " ", fixed = TRUE))
data2 <- as.data.frame(matrix(data1, ncol = 8, byrow = TRUE), stringsAsFactors = FALSE)
data2[, 5:8] <- lapply(data2[, 5:8], as.numeric)
colnames(data2) <- header
## can i reproduce it?
obsgrp[, psdex] <- lapply(obsgrp[, psdex], function(x) (x - mean(x, na.rm = TRUE))/sd(x, na.rm = TRUE))
ps172dex <- NULL
for(i in psdex){
form <- as.formula(paste("Surv(OS.time, OS.status == 'Dead') ~ ", colnames(obsgrp)[i]))
fit <- tryCatch(coxph(form, data = obsgrp, y = FALSE, ties = "breslow", robust = FALSE), error = function(e) NA)
if(is.na(fit[[1]])) next
fs <- summary(fit)$coefficients
ps172dex <- rbind(ps172dex, data.frame(probe = colnames(obsgrp)[i], index = i,
p.value = fs[5], hr = fs[2], lhr = exp(fs[1] - 1.96*fs[3]),
uhr = exp(fs[1] + 1.96*fs[3]), stringsAsFactors = FALSE))
}
load("../Data/jbl10-data-2015-12-17.RData")
## develop signature in 62 OBS patient subset
psdex <- 2:(grep("tissue", colnames(gdat)) - 1)
colnames(gdat)[psdex] <- paste0("X", colnames(gdat)[psdex])
table(gdat$Post.Surgical.Treatment)
obsgrp <- subset(gdat, Post.Surgical.Treatment == "OBS")
## identify subset of 172 probes with P < .005 in cox model with outcome
# results from Zhu, supplementary table 6S
zhu <- readLines("../Data/sig172-probes-zhu.txt")
header <- zhu[1:8]
data0 <- zhu[-c(1:8)]
data1 <- unlist(strsplit(data0, split = " ", fixed = TRUE))
data2 <- as.data.frame(matrix(data1, ncol = 8, byrow = TRUE), stringsAsFactors = FALSE)
data2[, 5:8] <- lapply(data2[, 5:8], as.numeric)
colnames(data2) <- header
## can i reproduce it?
obsgrp[, psdex] <- lapply(obsgrp[, psdex], function(x) (x - mean(x, na.rm = TRUE))/sd(x, na.rm = TRUE))
ps172dex <- NULL
for(i in psdex){
form <- as.formula(paste("Surv(OS.time, OS.status == 'Dead') ~ ", colnames(obsgrp)[i]))
fit <- tryCatch(coxph(form, data = obsgrp, y = FALSE, ties = "breslow", robust = FALSE), error = function(e) NA)
if(is.na(fit[[1]])) next
fs <- summary(fit)$coefficients
ps172dex <- rbind(ps172dex, data.frame(probe = colnames(obsgrp)[i], index = i,
p.value = fs[5], hr = fs[2], lhr = exp(fs[1] - 1.96*fs[3]),
uhr = exp(fs[1] + 1.96*fs[3]), stringsAsFactors = FALSE))
}
ps172dex$probe2 <- ifelse(substr(ps172dex$probe, 1, 1) == "X",
substr(ps172dex$probe, 2, nchar(ps172dex$probe)), ps172dex$probe)
matches <- merge(data2, ps172dex, by.x = "Probe Set ID", by.y = "probe2", all.x = TRUE, all.y = FALSE)
plot(hr ~ HR, data = matches)
plot(hr ~ HR, data = matches, log = "xy")
ps172dex[1:4,]
table(ps172dex$p.value < .005)
matches
subgrp <- obsgrp[, c("ID", matches$probe, "OS.time", "OS.status")]
colnames(obsgrp)
colnames(obsgrp)[ncol(obsgrp)]
colnames(obsgrp)[(ncol(obsgrp)-20):ncol(obsgrp)]
subgrp <- obsgrp[, c("ID", paste(matches$probe), "OS.time", "OS.status")]
colnames(obsgrp)[1]
paste(matches$probe)
matches
library(Biobase)
library(GEOquery)
library(rio)
library(sva)
# load series and platform data from GEO
gset <- getGEO("GSE14814", GSEMatrix =TRUE)
if (length(gset) > 1) idx <- grep("GPL96", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
gdat <- as(gset, "data.frame")
gdat$ID <- sampleNames(phenoData(gset))
gexpr <- exprs(gset)
fdata <- fData(gset)
#fdex <- fdata$ID[fdata$ENTREZ_GENE_ID != "" & fdata$`Gene Ontology Cellular Component` != ""]
#gexpr <- gexpr[fdex, ]
anyna <- rowSums(is.na(gexpr)) > 0
gexpr <- gexpr[!anyna, ]
## 19,619 genes, close enough
dim(gexpr)
parse_pheno <- function(x){
pair <- strsplit(paste(x), ": ", fixed = TRUE)
if(length(pair[[1]]) == 1){
x
} else {
name <- pair[[1]]
name <- name[!is.na(name)][1]
val <- sapply(pair, "[", 2)
## try converting to numeric
nval <- as.numeric(val)
if(all(is.na(nval))) nval <- val
out <- data.frame(nval)
colnames(out) <- name
out
}
pheno0 <- gdat[, c("ID", grep("characteristics", colnames((gdat[, (ncol(gdat) - 55):ncol(gdat)])[1:4, ]), value = TRUE))]
pheno0$characteristics_ch1.12 <- paste(pheno0$characteristics_ch1.12)
pheno0$characteristics_ch1.12[pheno0$characteristics_ch1.12 == ""] <- paste(pheno0$characteristics_ch1.11[pheno0$characteristics_ch1.12 == ""])
pheno0$characteristics_ch1.11 <- NULL
pheno <- as.data.frame(lapply(pheno0, parse_pheno))
#gdat <- merge(gdat, pheno, by = "ID")
gdat$batch <- ifelse(gdat$data_processing == "The data were preprocessed using RMA v0.5.", -1, 1)
## remove batch effect
modcom <- model.matrix( ~ 1, data = gdat)
batchadj <- ComBat(gexpr, batch = gdat$batch, mod = modcom, prior.plots = TRUE)
expradj <- as.data.frame(t(batchadj))
expradj$ID <- rownames(expradj)
gdat <- merge(expradj, pheno, by = "ID")
## make sure no merging errors in data
pheno.xls <- import("../Data/Zhu_2010_JCO_microarray_pts_clin_info.xls", sheet = 1)
check <- merge(pheno, pheno.xls, by.x = "age", by.y = "Age")
check2 <- subset(check, OS.time == `OS time`)
# nrow(check2) == nrow(pheno)
# plot(OS.time ~ `OS time`, data = check2)
# we good
save(gdat, file = paste0("../Data/jbl10-data-", Sys.Date(), ".RData"))
library(survival)
load("../Data/jbl10-data-2015-12-17.RData")
## develop signature in 62 OBS patient subset
psdex <- 2:(grep("tissue", colnames(gdat)) - 1)
colnames(gdat)[psdex] <- paste0("X", colnames(gdat)[psdex])
table(gdat$Post.Surgical.Treatment)
obsgrp <- subset(gdat, Post.Surgical.Treatment == "OBS")
## identify subset of 172 probes with P < .005 in cox model with outcome
# results from Zhu, supplementary table 6S
zhu <- readLines("../Data/sig172-probes-zhu.txt")
header <- zhu[1:8]
data0 <- zhu[-c(1:8)]
data1 <- unlist(strsplit(data0, split = " ", fixed = TRUE))
data2 <- as.data.frame(matrix(data1, ncol = 8, byrow = TRUE), stringsAsFactors = FALSE)
data2[, 5:8] <- lapply(data2[, 5:8], as.numeric)
colnames(data2) <- header
## can i reproduce it?
#obsgrp[, psdex] <- lapply(obsgrp[, psdex], function(x) (x - mean(x, na.rm = TRUE))/sd(x, na.rm = TRUE))
ps172dex <- NULL
for(i in psdex){
form <- as.formula(paste("Surv(OS.time, OS.status == 'Dead') ~ ", colnames(obsgrp)[i]))
fit <- tryCatch(coxph(form, data = obsgrp, y = FALSE, ties = "breslow", robust = FALSE), error = function(e) NA)
if(is.na(fit[[1]])) next
fs <- summary(fit)$coefficients
ps172dex <- rbind(ps172dex, data.frame(probe = colnames(obsgrp)[i], index = i,
p.value = fs[5], hr = fs[2], lhr = exp(fs[1] - 1.96*fs[3]),
uhr = exp(fs[1] + 1.96*fs[3]), stringsAsFactors = FALSE))
}
ps172dex$probe2 <- ifelse(substr(ps172dex$probe, 1, 1) == "X",
substr(ps172dex$probe, 2, nchar(ps172dex$probe)), ps172dex$probe)
matches <- merge(data2, ps172dex, by.x = "Probe Set ID", by.y = "probe2", all.x = TRUE, all.y = FALSE)
plot(hr ~ HR, data = matches)
